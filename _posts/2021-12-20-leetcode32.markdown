---
layout: post
title: "Leetcode Problem 32 Dynamic Programming in Java"
permalink: /2021-12-20/
usemathjax: true
categories: Computer Science
math: true
mathjax: true
future: true
---

# Problem 32
## Statement  

Given a string $s$ consisting of $($ and $)$, find the length of the longest valid substring of parentheses.  

## Solution  

We use a dynamic programming approach.  

Call longest valid substring of parentheses ending at the $i$th position with $)$ **valid** if it is maximal and all parenthese inside it are matched. For instance, ```()()()``` is **valid**, but ```()())``` is not.  

The subproblems are the length of those strings.  The entries ```D[i]``` of the array will store exactly those numbers and we have the following recurrence relation.  

**1.** If the $i$th position is $)$ and the $i-1$th position is $($, then ```D[i]=D[i-2]+2```.  

**2.** If the $i$th position is $)$ and the $i-1$th position is $)$, then we consider the starting point of the **valid** substring ending at $i-1$ (if any), whose index is given by ```i-D[i-1]```. Then we obtain recurrence relation depending on the position of the index.  

A dynamic programming solution in Java is written below.  

## Solution in Java:  

